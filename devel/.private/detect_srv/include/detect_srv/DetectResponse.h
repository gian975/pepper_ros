// Generated by gencpp from file detect_srv/DetectResponse.msg
// DO NOT EDIT!


#ifndef DETECT_SRV_MESSAGE_DETECTRESPONSE_H
#define DETECT_SRV_MESSAGE_DETECTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace detect_srv
{
template <class ContainerAllocator>
struct DetectResponse_
{
  typedef DetectResponse_<ContainerAllocator> Type;

  DetectResponse_()
    : objects()  {
    }
  DetectResponse_(const ContainerAllocator& _alloc)
    : objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::detect_srv::DetectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect_srv::DetectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectResponse_

typedef ::detect_srv::DetectResponse_<std::allocator<void> > DetectResponse;

typedef boost::shared_ptr< ::detect_srv::DetectResponse > DetectResponsePtr;
typedef boost::shared_ptr< ::detect_srv::DetectResponse const> DetectResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect_srv::DetectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect_srv::DetectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detect_srv::DetectResponse_<ContainerAllocator1> & lhs, const ::detect_srv::DetectResponse_<ContainerAllocator2> & rhs)
{
  return lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detect_srv::DetectResponse_<ContainerAllocator1> & lhs, const ::detect_srv::DetectResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detect_srv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detect_srv::DetectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_srv::DetectResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_srv::DetectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_srv::DetectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_srv::DetectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_srv::DetectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect_srv::DetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fae1e7f2d6efaedac191c053659f1c34";
  }

  static const char* value(const ::detect_srv::DetectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfae1e7f2d6efaedaULL;
  static const uint64_t static_value2 = 0xc191c053659f1c34ULL;
};

template<class ContainerAllocator>
struct DataType< ::detect_srv::DetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect_srv/DetectResponse";
  }

  static const char* value(const ::detect_srv::DetectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect_srv::DetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String[] objects\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::detect_srv::DetectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect_srv::DetectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect_srv::DetectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect_srv::DetectResponse_<ContainerAllocator>& v)
  {
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_SRV_MESSAGE_DETECTRESPONSE_H
