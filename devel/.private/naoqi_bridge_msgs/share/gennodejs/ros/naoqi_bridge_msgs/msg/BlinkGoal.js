// Auto-generated. Do not edit!

// (in-package naoqi_bridge_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let std_msgs = _finder('std_msgs');

//-----------------------------------------------------------

class BlinkGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.colors = null;
      this.bg_color = null;
      this.blink_duration = null;
      this.blink_rate_mean = null;
      this.blink_rate_sd = null;
    }
    else {
      if (initObj.hasOwnProperty('colors')) {
        this.colors = initObj.colors
      }
      else {
        this.colors = [];
      }
      if (initObj.hasOwnProperty('bg_color')) {
        this.bg_color = initObj.bg_color
      }
      else {
        this.bg_color = new std_msgs.msg.ColorRGBA();
      }
      if (initObj.hasOwnProperty('blink_duration')) {
        this.blink_duration = initObj.blink_duration
      }
      else {
        this.blink_duration = {secs: 0, nsecs: 0};
      }
      if (initObj.hasOwnProperty('blink_rate_mean')) {
        this.blink_rate_mean = initObj.blink_rate_mean
      }
      else {
        this.blink_rate_mean = 0.0;
      }
      if (initObj.hasOwnProperty('blink_rate_sd')) {
        this.blink_rate_sd = initObj.blink_rate_sd
      }
      else {
        this.blink_rate_sd = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type BlinkGoal
    // Serialize message field [colors]
    // Serialize the length for message field [colors]
    bufferOffset = _serializer.uint32(obj.colors.length, buffer, bufferOffset);
    obj.colors.forEach((val) => {
      bufferOffset = std_msgs.msg.ColorRGBA.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [bg_color]
    bufferOffset = std_msgs.msg.ColorRGBA.serialize(obj.bg_color, buffer, bufferOffset);
    // Serialize message field [blink_duration]
    bufferOffset = _serializer.duration(obj.blink_duration, buffer, bufferOffset);
    // Serialize message field [blink_rate_mean]
    bufferOffset = _serializer.float32(obj.blink_rate_mean, buffer, bufferOffset);
    // Serialize message field [blink_rate_sd]
    bufferOffset = _serializer.float32(obj.blink_rate_sd, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type BlinkGoal
    let len;
    let data = new BlinkGoal(null);
    // Deserialize message field [colors]
    // Deserialize array length for message field [colors]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.colors = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.colors[i] = std_msgs.msg.ColorRGBA.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [bg_color]
    data.bg_color = std_msgs.msg.ColorRGBA.deserialize(buffer, bufferOffset);
    // Deserialize message field [blink_duration]
    data.blink_duration = _deserializer.duration(buffer, bufferOffset);
    // Deserialize message field [blink_rate_mean]
    data.blink_rate_mean = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [blink_rate_sd]
    data.blink_rate_sd = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 16 * object.colors.length;
    return length + 36;
  }

  static datatype() {
    // Returns string type for a message object
    return 'naoqi_bridge_msgs/BlinkGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '5e5d3c2ba9976dc121a0bb6ef7c66d79';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Goal: colours to use for blinking, plus blinking rate mean and sd
    # Result: true if robot is still blinking (call was pre-empted by another user)
    # Feedback: last blinked colour
    std_msgs/ColorRGBA[] colors
    std_msgs/ColorRGBA bg_color
    duration blink_duration
    float32 blink_rate_mean
    float32 blink_rate_sd
    
    ================================================================================
    MSG: std_msgs/ColorRGBA
    float32 r
    float32 g
    float32 b
    float32 a
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new BlinkGoal(null);
    if (msg.colors !== undefined) {
      resolved.colors = new Array(msg.colors.length);
      for (let i = 0; i < resolved.colors.length; ++i) {
        resolved.colors[i] = std_msgs.msg.ColorRGBA.Resolve(msg.colors[i]);
      }
    }
    else {
      resolved.colors = []
    }

    if (msg.bg_color !== undefined) {
      resolved.bg_color = std_msgs.msg.ColorRGBA.Resolve(msg.bg_color)
    }
    else {
      resolved.bg_color = new std_msgs.msg.ColorRGBA()
    }

    if (msg.blink_duration !== undefined) {
      resolved.blink_duration = msg.blink_duration;
    }
    else {
      resolved.blink_duration = {secs: 0, nsecs: 0}
    }

    if (msg.blink_rate_mean !== undefined) {
      resolved.blink_rate_mean = msg.blink_rate_mean;
    }
    else {
      resolved.blink_rate_mean = 0.0
    }

    if (msg.blink_rate_sd !== undefined) {
      resolved.blink_rate_sd = msg.blink_rate_sd;
    }
    else {
      resolved.blink_rate_sd = 0.0
    }

    return resolved;
    }
};

module.exports = BlinkGoal;
