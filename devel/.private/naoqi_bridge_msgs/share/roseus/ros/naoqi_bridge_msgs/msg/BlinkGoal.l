;; Auto-generated. Do not edit!


(when (boundp 'naoqi_bridge_msgs::BlinkGoal)
  (if (not (find-package "NAOQI_BRIDGE_MSGS"))
    (make-package "NAOQI_BRIDGE_MSGS"))
  (shadow 'BlinkGoal (find-package "NAOQI_BRIDGE_MSGS")))
(unless (find-package "NAOQI_BRIDGE_MSGS::BLINKGOAL")
  (make-package "NAOQI_BRIDGE_MSGS::BLINKGOAL"))

(in-package "ROS")
;;//! \htmlinclude BlinkGoal.msg.html
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass naoqi_bridge_msgs::BlinkGoal
  :super ros::object
  :slots (_colors _bg_color _blink_duration _blink_rate_mean _blink_rate_sd ))

(defmethod naoqi_bridge_msgs::BlinkGoal
  (:init
   (&key
    ((:colors __colors) (let (r) (dotimes (i 0) (push (instance std_msgs::ColorRGBA :init) r)) r))
    ((:bg_color __bg_color) (instance std_msgs::ColorRGBA :init))
    ((:blink_duration __blink_duration) (instance ros::time :init))
    ((:blink_rate_mean __blink_rate_mean) 0.0)
    ((:blink_rate_sd __blink_rate_sd) 0.0)
    )
   (send-super :init)
   (setq _colors __colors)
   (setq _bg_color __bg_color)
   (setq _blink_duration __blink_duration)
   (setq _blink_rate_mean (float __blink_rate_mean))
   (setq _blink_rate_sd (float __blink_rate_sd))
   self)
  (:colors
   (&rest __colors)
   (if (keywordp (car __colors))
       (send* _colors __colors)
     (progn
       (if __colors (setq _colors (car __colors)))
       _colors)))
  (:bg_color
   (&rest __bg_color)
   (if (keywordp (car __bg_color))
       (send* _bg_color __bg_color)
     (progn
       (if __bg_color (setq _bg_color (car __bg_color)))
       _bg_color)))
  (:blink_duration
   (&optional __blink_duration)
   (if __blink_duration (setq _blink_duration __blink_duration)) _blink_duration)
  (:blink_rate_mean
   (&optional __blink_rate_mean)
   (if __blink_rate_mean (setq _blink_rate_mean __blink_rate_mean)) _blink_rate_mean)
  (:blink_rate_sd
   (&optional __blink_rate_sd)
   (if __blink_rate_sd (setq _blink_rate_sd __blink_rate_sd)) _blink_rate_sd)
  (:serialization-length
   ()
   (+
    ;; std_msgs/ColorRGBA[] _colors
    (apply #'+ (send-all _colors :serialization-length)) 4
    ;; std_msgs/ColorRGBA _bg_color
    (send _bg_color :serialization-length)
    ;; duration _blink_duration
    8
    ;; float32 _blink_rate_mean
    4
    ;; float32 _blink_rate_sd
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/ColorRGBA[] _colors
     (write-long (length _colors) s)
     (dolist (elem _colors)
       (send elem :serialize s)
       )
     ;; std_msgs/ColorRGBA _bg_color
       (send _bg_color :serialize s)
     ;; duration _blink_duration
       (write-long (send _blink_duration :sec) s) (write-long (send _blink_duration :nsec) s)
     ;; float32 _blink_rate_mean
       (sys::poke _blink_rate_mean (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _blink_rate_sd
       (sys::poke _blink_rate_sd (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/ColorRGBA[] _colors
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _colors (let (r) (dotimes (i n) (push (instance std_msgs::ColorRGBA :init) r)) r))
     (dolist (elem- _colors)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; std_msgs/ColorRGBA _bg_color
     (send _bg_color :deserialize buf ptr-) (incf ptr- (send _bg_color :serialization-length))
   ;; duration _blink_duration
     (send _blink_duration :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _blink_duration :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float32 _blink_rate_mean
     (setq _blink_rate_mean (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _blink_rate_sd
     (setq _blink_rate_sd (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get naoqi_bridge_msgs::BlinkGoal :md5sum-) "5e5d3c2ba9976dc121a0bb6ef7c66d79")
(setf (get naoqi_bridge_msgs::BlinkGoal :datatype-) "naoqi_bridge_msgs/BlinkGoal")
(setf (get naoqi_bridge_msgs::BlinkGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal: colours to use for blinking, plus blinking rate mean and sd
# Result: true if robot is still blinking (call was pre-empted by another user)
# Feedback: last blinked colour
std_msgs/ColorRGBA[] colors
std_msgs/ColorRGBA bg_color
duration blink_duration
float32 blink_rate_mean
float32 blink_rate_sd

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

")



(provide :naoqi_bridge_msgs/BlinkGoal "5e5d3c2ba9976dc121a0bb6ef7c66d79")


