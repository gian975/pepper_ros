// Generated by gencpp from file naoqi_bridge_msgs/HeadTouch.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_HEADTOUCH_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_HEADTOUCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct HeadTouch_
{
  typedef HeadTouch_<ContainerAllocator> Type;

  HeadTouch_()
    : button(0)
    , state(0)  {
    }
  HeadTouch_(const ContainerAllocator& _alloc)
    : button(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _button_type;
  _button_type button;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(buttonFront)
  #undef buttonFront
#endif
#if defined(_WIN32) && defined(buttonMiddle)
  #undef buttonMiddle
#endif
#if defined(_WIN32) && defined(buttonRear)
  #undef buttonRear
#endif
#if defined(_WIN32) && defined(stateReleased)
  #undef stateReleased
#endif
#if defined(_WIN32) && defined(statePressed)
  #undef statePressed
#endif

  enum {
    buttonFront = 1u,
    buttonMiddle = 2u,
    buttonRear = 3u,
    stateReleased = 0u,
    statePressed = 1u,
  };


  typedef boost::shared_ptr< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> const> ConstPtr;

}; // struct HeadTouch_

typedef ::naoqi_bridge_msgs::HeadTouch_<std::allocator<void> > HeadTouch;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::HeadTouch > HeadTouchPtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::HeadTouch const> HeadTouchConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator2> & rhs)
{
  return lhs.button == rhs.button &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b75165bf9dfed26d50ad4e3162304225";
  }

  static const char* value(const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb75165bf9dfed26dULL;
  static const uint64_t static_value2 = 0x50ad4e3162304225ULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/HeadTouch";
  }

  static const char* value(const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message for Nao's tactile interface (toucht buttons on the head)\n"
"\n"
"uint8 button            # which of the three segments is touched\n"
"uint8 state             # pressed or released, see below\n"
"\n"
"uint8 buttonFront=1\n"
"uint8 buttonMiddle=2\n"
"uint8 buttonRear=3\n"
"\n"
"uint8 stateReleased=0\n"
"uint8 statePressed=1\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadTouch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::HeadTouch_<ContainerAllocator>& v)
  {
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_HEADTOUCH_H
