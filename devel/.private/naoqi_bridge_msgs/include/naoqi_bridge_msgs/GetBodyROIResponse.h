// Generated by gencpp from file naoqi_bridge_msgs/GetBodyROIResponse.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_GETBODYROIRESPONSE_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_GETBODYROIRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <naoqi_bridge_msgs/BodyROI.h>

namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct GetBodyROIResponse_
{
  typedef GetBodyROIResponse_<ContainerAllocator> Type;

  GetBodyROIResponse_()
    : bodies()  {
    }
  GetBodyROIResponse_(const ContainerAllocator& _alloc)
    : bodies(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::naoqi_bridge_msgs::BodyROI_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::naoqi_bridge_msgs::BodyROI_<ContainerAllocator> >::other >  _bodies_type;
  _bodies_type bodies;





  typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetBodyROIResponse_

typedef ::naoqi_bridge_msgs::GetBodyROIResponse_<std::allocator<void> > GetBodyROIResponse;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetBodyROIResponse > GetBodyROIResponsePtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetBodyROIResponse const> GetBodyROIResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator2> & rhs)
{
  return lhs.bodies == rhs.bodies;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecc2963facbb989a955948135b6e21fd";
  }

  static const char* value(const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecc2963facbb989aULL;
  static const uint64_t static_value2 = 0x955948135b6e21fdULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/GetBodyROIResponse";
  }

  static const char* value(const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BodyROI[] bodies\n"
"\n"
"\n"
"================================================================================\n"
"MSG: naoqi_bridge_msgs/BodyROI\n"
"float32 angle\n"
"float32 cx\n"
"float32 cy\n"
"float32 height\n"
"float32 width\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bodies);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetBodyROIResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::GetBodyROIResponse_<ContainerAllocator>& v)
  {
    s << indent << "bodies[]" << std::endl;
    for (size_t i = 0; i < v.bodies.size(); ++i)
    {
      s << indent << "  bodies[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::naoqi_bridge_msgs::BodyROI_<ContainerAllocator> >::stream(s, indent + "    ", v.bodies[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_GETBODYROIRESPONSE_H
