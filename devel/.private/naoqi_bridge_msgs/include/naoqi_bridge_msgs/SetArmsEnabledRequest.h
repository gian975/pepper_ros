// Generated by gencpp from file naoqi_bridge_msgs/SetArmsEnabledRequest.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_SETARMSENABLEDREQUEST_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_SETARMSENABLEDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct SetArmsEnabledRequest_
{
  typedef SetArmsEnabledRequest_<ContainerAllocator> Type;

  SetArmsEnabledRequest_()
    : left_arm(false)
    , right_arm(false)  {
    }
  SetArmsEnabledRequest_(const ContainerAllocator& _alloc)
    : left_arm(false)
    , right_arm(false)  {
  (void)_alloc;
    }



   typedef uint8_t _left_arm_type;
  _left_arm_type left_arm;

   typedef uint8_t _right_arm_type;
  _right_arm_type right_arm;





  typedef boost::shared_ptr< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetArmsEnabledRequest_

typedef ::naoqi_bridge_msgs::SetArmsEnabledRequest_<std::allocator<void> > SetArmsEnabledRequest;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::SetArmsEnabledRequest > SetArmsEnabledRequestPtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::SetArmsEnabledRequest const> SetArmsEnabledRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator2> & rhs)
{
  return lhs.left_arm == rhs.left_arm &&
    lhs.right_arm == rhs.right_arm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4da9069facca935244c3405e288ba555";
  }

  static const char* value(const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4da9069facca9352ULL;
  static const uint64_t static_value2 = 0x44c3405e288ba555ULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/SetArmsEnabledRequest";
  }

  static const char* value(const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Enable or disable the arms while walking\n"
"bool left_arm\n"
"bool right_arm\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_arm);
      stream.next(m.right_arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetArmsEnabledRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::SetArmsEnabledRequest_<ContainerAllocator>& v)
  {
    s << indent << "left_arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_arm);
    s << indent << "right_arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_SETARMSENABLEDREQUEST_H
