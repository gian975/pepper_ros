// Generated by gencpp from file naoqi_bridge_msgs/JointAnglesWithSpeed.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_JOINTANGLESWITHSPEED_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_JOINTANGLESWITHSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct JointAnglesWithSpeed_
{
  typedef JointAnglesWithSpeed_<ContainerAllocator> Type;

  JointAnglesWithSpeed_()
    : header()
    , joint_names()
    , joint_angles()
    , speed(0.0)
    , relative(0)  {
    }
  JointAnglesWithSpeed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , joint_angles(_alloc)
    , speed(0.0)
    , relative(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _relative_type;
  _relative_type relative;





  typedef boost::shared_ptr< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct JointAnglesWithSpeed_

typedef ::naoqi_bridge_msgs::JointAnglesWithSpeed_<std::allocator<void> > JointAnglesWithSpeed;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::JointAnglesWithSpeed > JointAnglesWithSpeedPtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::JointAnglesWithSpeed const> JointAnglesWithSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.joint_angles == rhs.joint_angles &&
    lhs.speed == rhs.speed &&
    lhs.relative == rhs.relative;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "052ca11f74a00ad6745dfff6ebc2b4d8";
  }

  static const char* value(const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x052ca11f74a00ad6ULL;
  static const uint64_t static_value2 = 0x745dfff6ebc2b4d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/JointAnglesWithSpeed";
  }

  static const char* value(const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# A list of joint names, corresponding to their names in the Nao docs.\n"
"# This must either have the same length as joint_angles or \n"
"# length 1 if it's a keyword such as 'Body' (for all angles)\n"
"string[] joint_names\n"
"float32[] joint_angles\n"
"\n"
"# fraction of max joint velocity [0:1]\n"
"float32 speed\n"
"\n"
"# Absolute angle (=0, default) or relative change\n"
"uint8 relative\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.joint_angles);
      stream.next(m.speed);
      stream.next(m.relative);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointAnglesWithSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::JointAnglesWithSpeed_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_JOINTANGLESWITHSPEED_H
