// Generated by gencpp from file naoqi_bridge_msgs/MemoryList.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_MEMORYLIST_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_MEMORYLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <naoqi_bridge_msgs/MemoryPairString.h>
#include <naoqi_bridge_msgs/MemoryPairInt.h>
#include <naoqi_bridge_msgs/MemoryPairFloat.h>

namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct MemoryList_
{
  typedef MemoryList_<ContainerAllocator> Type;

  MemoryList_()
    : header()
    , strings()
    , ints()
    , floats()  {
    }
  MemoryList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , strings(_alloc)
    , ints(_alloc)
    , floats(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::naoqi_bridge_msgs::MemoryPairString_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::naoqi_bridge_msgs::MemoryPairString_<ContainerAllocator> >::other >  _strings_type;
  _strings_type strings;

   typedef std::vector< ::naoqi_bridge_msgs::MemoryPairInt_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::naoqi_bridge_msgs::MemoryPairInt_<ContainerAllocator> >::other >  _ints_type;
  _ints_type ints;

   typedef std::vector< ::naoqi_bridge_msgs::MemoryPairFloat_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::naoqi_bridge_msgs::MemoryPairFloat_<ContainerAllocator> >::other >  _floats_type;
  _floats_type floats;





  typedef boost::shared_ptr< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> const> ConstPtr;

}; // struct MemoryList_

typedef ::naoqi_bridge_msgs::MemoryList_<std::allocator<void> > MemoryList;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::MemoryList > MemoryListPtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::MemoryList const> MemoryListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.strings == rhs.strings &&
    lhs.ints == rhs.ints &&
    lhs.floats == rhs.floats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7222936d1c205b51fbfdb13e468998ad";
  }

  static const char* value(const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7222936d1c205b51ULL;
  static const uint64_t static_value2 = 0xfbfdb13e468998adULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/MemoryList";
  }

  static const char* value(const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"MemoryPairString[] strings\n"
"MemoryPairInt[] ints\n"
"MemoryPairFloat[] floats\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: naoqi_bridge_msgs/MemoryPairString\n"
"string memoryKey\n"
"string data\n"
"================================================================================\n"
"MSG: naoqi_bridge_msgs/MemoryPairInt\n"
"string memoryKey\n"
"int32 data\n"
"================================================================================\n"
"MSG: naoqi_bridge_msgs/MemoryPairFloat\n"
"string memoryKey\n"
"float32 data\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.strings);
      stream.next(m.ints);
      stream.next(m.floats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MemoryList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::MemoryList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "strings[]" << std::endl;
    for (size_t i = 0; i < v.strings.size(); ++i)
    {
      s << indent << "  strings[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::naoqi_bridge_msgs::MemoryPairString_<ContainerAllocator> >::stream(s, indent + "    ", v.strings[i]);
    }
    s << indent << "ints[]" << std::endl;
    for (size_t i = 0; i < v.ints.size(); ++i)
    {
      s << indent << "  ints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::naoqi_bridge_msgs::MemoryPairInt_<ContainerAllocator> >::stream(s, indent + "    ", v.ints[i]);
    }
    s << indent << "floats[]" << std::endl;
    for (size_t i = 0; i < v.floats.size(); ++i)
    {
      s << indent << "  floats[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::naoqi_bridge_msgs::MemoryPairFloat_<ContainerAllocator> >::stream(s, indent + "    ", v.floats[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_MEMORYLIST_H
