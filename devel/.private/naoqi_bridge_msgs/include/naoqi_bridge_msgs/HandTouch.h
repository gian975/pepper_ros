// Generated by gencpp from file naoqi_bridge_msgs/HandTouch.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_HANDTOUCH_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_HANDTOUCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct HandTouch_
{
  typedef HandTouch_<ContainerAllocator> Type;

  HandTouch_()
    : hand(0)
    , state(0)  {
    }
  HandTouch_(const ContainerAllocator& _alloc)
    : hand(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _hand_type;
  _hand_type hand;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RIGHT_BACK)
  #undef RIGHT_BACK
#endif
#if defined(_WIN32) && defined(RIGHT_LEFT)
  #undef RIGHT_LEFT
#endif
#if defined(_WIN32) && defined(RIGHT_RIGHT)
  #undef RIGHT_RIGHT
#endif
#if defined(_WIN32) && defined(LEFT_BACK)
  #undef LEFT_BACK
#endif
#if defined(_WIN32) && defined(LEFT_LEFT)
  #undef LEFT_LEFT
#endif
#if defined(_WIN32) && defined(LEFT_RIGHT)
  #undef LEFT_RIGHT
#endif
#if defined(_WIN32) && defined(stateReleased)
  #undef stateReleased
#endif
#if defined(_WIN32) && defined(statePressed)
  #undef statePressed
#endif

  enum {
    RIGHT_BACK = 0u,
    RIGHT_LEFT = 1u,
    RIGHT_RIGHT = 2u,
    LEFT_BACK = 3u,
    LEFT_LEFT = 4u,
    LEFT_RIGHT = 5u,
    stateReleased = 0u,
    statePressed = 1u,
  };


  typedef boost::shared_ptr< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> const> ConstPtr;

}; // struct HandTouch_

typedef ::naoqi_bridge_msgs::HandTouch_<std::allocator<void> > HandTouch;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::HandTouch > HandTouchPtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::HandTouch const> HandTouchConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator2> & rhs)
{
  return lhs.hand == rhs.hand &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8d5c81c96dbe6a9e8e5d80beb70299d";
  }

  static const char* value(const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8d5c81c96dbe6a9ULL;
  static const uint64_t static_value2 = 0xe8e5d80beb70299dULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/HandTouch";
  }

  static const char* value(const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message for Nao and Pepper's hand touch interface (touched tactile sensors on the hands)\n"
"\n"
"uint8 hand            # which hand (left or right)\n"
"uint8 state           # state of the hands (pressed or released)\n"
"\n"
"uint8 RIGHT_BACK=0\n"
"uint8 RIGHT_LEFT=1\n"
"uint8 RIGHT_RIGHT=2\n"
"uint8 LEFT_BACK=3\n"
"uint8 LEFT_LEFT=4\n"
"uint8 LEFT_RIGHT=5\n"
"\n"
"uint8 stateReleased=0\n"
"uint8 statePressed=1\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandTouch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::HandTouch_<ContainerAllocator>& v)
  {
    s << indent << "hand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_HANDTOUCH_H
