// Generated by gencpp from file naoqi_bridge_msgs/GetRobotInfoResponse.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_GETROBOTINFORESPONSE_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_GETROBOTINFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <naoqi_bridge_msgs/RobotInfo.h>

namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct GetRobotInfoResponse_
{
  typedef GetRobotInfoResponse_<ContainerAllocator> Type;

  GetRobotInfoResponse_()
    : info()  {
    }
  GetRobotInfoResponse_(const ContainerAllocator& _alloc)
    : info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::naoqi_bridge_msgs::RobotInfo_<ContainerAllocator>  _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRobotInfoResponse_

typedef ::naoqi_bridge_msgs::GetRobotInfoResponse_<std::allocator<void> > GetRobotInfoResponse;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetRobotInfoResponse > GetRobotInfoResponsePtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::GetRobotInfoResponse const> GetRobotInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator1> & lhs, const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a705e4ea65692d6e21188b3537da43d";
  }

  static const char* value(const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a705e4ea65692d6ULL;
  static const uint64_t static_value2 = 0xe21188b3537da43dULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/GetRobotInfoResponse";
  }

  static const char* value(const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/RobotInfo info\n"
"\n"
"\n"
"================================================================================\n"
"MSG: naoqi_bridge_msgs/RobotInfo\n"
"# info here is inspired by http://doc.aldebaran.com/2-1/naoqi/motion/tools-general-api.html?highlight=getrobotconfig#ALMotionProxy::getRobotConfig\n"
"\n"
"# enums describing the robot type\n"
"uint8 NAO=0\n"
"uint8 ROMEO=1\n"
"uint8 PEPPER=2\n"
"\n"
"# one of NAO, ROMEO, PEPPER\n"
"uint8 type\n"
"\n"
"# \"Model Type\"   : \"naoH25\", \"naoH21\", \"naoT14\" or \"naoT2\".\n"
"string model\n"
"# \"Head Version\" : \"VERSION_32\" or \"VERSION_33\" or \"VERSION_40\".\n"
"string head_version\n"
"# \"Body Version\" : \"VERSION_32\" or \"VERSION_33\" or \"VERSION_40\".\n"
"string body_version\n"
"# \"Arm Version\"  : \"VERSION_32\" or \"VERSION_33\" or \"VERSION_40\".\n"
"string arm_version\n"
"\n"
"# \"Laser\"        : True or False.\n"
"bool has_laser\n"
"# \"Extended Arms\": True or False.\n"
"bool has_extended_arms\n"
"\n"
"# Number of Legs : 0 or 2\n"
"int32 number_of_legs\n"
"# Number of Arms : 0 or 2\n"
"int32 number_of_arms\n"
"# Number of Hands: 0 or 2\n"
"int32 number_of_hands\n"
;
  }

  static const char* value(const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRobotInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::GetRobotInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::naoqi_bridge_msgs::RobotInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_GETROBOTINFORESPONSE_H
